<?xml version="1.0"?>
<!DOCTYPE section PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN"
  "http://www.docbook.org/xml/4.5/docbookx.dtd">
  
<section id="ACO-Crypto-Stream_Cipher">
  <title>Package ACO.Crypto.Stream_Cipher</title>

  <para>The package <package>ACO.Crypto.Stream_Cipher</package> contains the definition of a
    root <type>Stream_Cipher</type> type along with its associated primitive operations.
      <package>ACO.Crypo.Stream_Cipher</package> also declares types supporting various stream
    cipher encryption modes.</para>

  <synopsis>
    type Stream_Cipher is abstract new Ada.Finalization.Controlled with private;
    type Stream_Cipher_Access is access all Stream_Cipher'Class;
    
    -- In-place form.
    procedure Encrypt(S : in out Stream_Cipher; Data : in out Octet);
    procedure Decrypt(S : in out Stream_Cipher; Data : in out Octet);
    
    -- Copying form.
    procedure Encrypt(S : in out Stream_Cipher; Input_Data : in Octet; Output_Data : out Octet);
    procedure Decrypt(S : in out Stream_Cipher; Input_Data : in Octet; Output_Data : out Octet);
  </synopsis>

  <para>The main <type>Stream_Cipher</type> type specifies the protocol that must be used with
    stream cipher objects. This protocol is quite simple: to encrypt an octet one of the
      <function>Encrypt</function> procedures must be used, and to decrypt an octet one of the
      <function>Decrypt</function> procedures must be used. Each type derived from
      <type>Stream_Ciper</type> provides its own initialization procedure, if necessary.</para>

  <para>There are in-place and copying forms of the encryption and decryption procedures. The
    in-place form performs its operation on the octet in place, overwriting the input octet with
    the result. The copying form writes its result to a new octet and treats its input as
    read-only. Both forms are provided for all <type>Stream_Cipher</type> types so that
    whichever form is more convenient can be used.</para>

  <para>In the <type>Stream_Cipher</type> type the in-place forms are implemented in terms of
    the copying forms and visa-versa. Thus derived types need only override one of the forms and
    can inherit the other form as necessary. Since different ciphers may be more naturally
    implemented as in-place or as copying, this approach allows the author of a derived type the
    flexibility of implementing whichever form is most natural for that type. Note that using an
    "unnatural" form will most likely cause extra copying to be done. Thus for maximum
    efficiency the developer will want to know which approach is best for the particular ciphers
    being used. However, all ciphers will provide both forms (perhaps by way of inheritance) so
    that correct programs can be written either way.</para>

  <warning>
    <para>When implementing a type derived from <type>Stream_Cipher</type> at least one of the
      two forms <emphasis>must</emphasis> be implemented. If both forms are inherited any
      attempt to encrypt or decrypt an octent will result in an infinite recursion as the
      inherited forms call each other. However, creating a <type>Stream_Cipher</type> without
      implementing at least one form of encryption and decryption should be rare. This warning
      mostly applies to people writing their own null ciphers or who are creating stubs during
      program development<footnote>
        <para>Design Note: It would be safer to declare the encryption and decryption procedures
          in <type>Stream_Cipher</type> as <code>abstract</code> and force each downstream
          implementor to provide both forms, implementing one in terms of the other explicilty
          as necessary.</para>
      </footnote>.</para>
  </warning>

  <para>Normally a given <type>Stream_Cipher</type> instance can be in either encryption mode or
    decryption mode. The <type>Stream_Cipher</type> interface does not specify how this mode is
    selected. It may be part of the instance's initialization or it may be automatic with the
    first operation applied to the instance defining its mode. In general
    <type>Stream_Cipher</type> instances can not change mode during their lifetime, although
    some derived types may provide a way to reinitialize the instance into a different mode.
    However, some <type>Stream_Cipher</type> types may be modeless and can be switched between
    encryption mode and decryption mode freely. In any case, if an attempt is made to use the
    wrong mode, for example by calling <function>Decrypt</function> on an instance in encryption
    mode, the <exceptionname>ACO.Crypto.Bad_Cipher_Mode</exceptionname> exception is raised.</para>

  <synopsis>
    type CFB_Mode is new Stream_Cipher with private;
    
    not overridding
    procedure Make
       (S          : out CFB_Mode;
        Underlying : in  Block_Cipher_Access;
        IV         : in  Octet_Array);
  </synopsis>

  <para>The type <type>CFB_Mode</type> is a wrapper around <type>Stream_Cipher</type> that
    implements the cipher feedback (CFB) encryption mode. It provides the protocol of a
      <type>Stream_Cipher</type> and is initialized with procedure <function>Make</function>.
    The initialization takes an access value that references an underlying
    <type>Block_Cipher</type> instance and an initialization vector with a size equal to the
    underlying cipher's block size (else
    <exceptionname>ACO.Crypto.Block_Cipher.Bad_Block_Size</exceptionname> is raised). Once
    initialized a <type>CFB_Mode</type> object can be used like any other
    <type>Stream_Cipher</type>.</para>

  <para>Note that when a <type>CFB_Mode</type> instance is finalized the underlying
      <type>Block_Cipher</type> instance is not modified. Only the additional resources required
    for the CFB mode implementation are released.</para>

  <section id="ACO-Crypto-Stream_Cipher-None">
    <title>Package ACO.Crypto.Stream_Cipher.None</title>

    <synopsis>
      type Null_Cipher is new Stream_Cipher with private;
    </synopsis>

    <para>The <package>ACO.Crypto.Stream_Cipher.None</package> provides a concrete type
        <type>Null_Cipher</type>. Instances of this type obey the <type>Stream_Cipher</type>
      interface but perform no computations. They can be used as a place holder when a stream
      cipher is needed by the software and yet no encryption is desired.</para>
  </section>

</section>
